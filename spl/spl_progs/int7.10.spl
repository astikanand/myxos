alias physicalSP S0;
alias sysCallNo S1;
alias currentPID S2;
alias newPID S3;
alias currentPCB S4;
alias newPCB S5;
alias i S6;
alias currentPTBR S7;
alias PPFTStart S8;
alias fileDescriptor S9;
alias sysTabIndex S10;
alias waitingPID S11;
alias newphysicalSP S12; 




physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
sysCallNo = [physicalSP - 1];
currentPID = (PTBR - 1024) / 8;
currentPCB = READY_LIST + 32 * currentPID;



//************************Implementation of Exit system call()**************************/
if (sysCallNo == 10) then	
	
	newPID = -1;
	i = READY_LIST + 1;
	[ currentPCB + 1 ] = 0; 	                                   // Set STATE to OVER
	while (i < READY_LIST + 1024) do
		if ([i]==(currentPID+100)) then
			[i] = 1;
		endif;
		if (newPID == -1 && [i] == 1) then
			newPID = (i - READY_LIST - 1) / 32;
		endif;
		i = i+32;
	endwhile;
	
	if(newPID==-1) then
		halt;
	endif;
	
	
	
	currentPTBR = PAGE_TABLE + currentPID * 8;
	

	
	PPFTStart = currentPCB + 15;
	fileDescriptor = PPFTStart;
	PPFTStart = PPFTStart + 16;
	
	while(fileDescriptor<PPFTStart) do
		if([fileDescriptor] == -1) then
			fileDescriptor = fileDescriptor + 2;
			continue;
		endif;
		
		sysTabIndex = FILE_TABLE + 2*[fileDescriptor] + 1;
		[sysTabIndex] = [sysTabIndex] - 1;
		
		if([sysTabIndex]==0) then
			[sysTabIndex-1] = -1;
		endif;
		
		[fileDescriptor] = -1;
		[fileDescriptor + 1] = -1;
		fileDescriptor = fileDescriptor + 2;
	endwhile;
	

	i = currentPTBR;
	while(i<6) do
		if([i]!=-1) then
			if([i + 1]=="11" || [i + 1]=="01") then
				[MEM_LIST + [i]] = [MEM_LIST + [i]] - 1;
			else
				if([i]>=448) then
					[DISK_LIST + [i]] = [DISK_LIST + [i]] - 1;
				endif;
			endif;
			[i] = -1;
			[i + 1] = "00";
		endif;
		i = i + 2;
	endwhile;
	
	breakpoint;
	store(6,20);
	
endif;



//*******************Implementation of Wait() system Call()*****************************/
if (sysCallNo == 13) then	
	waitingPID = [physicalSP - 3];
	
	if(waitingPID<0 || waitingPID>31 || currentPID == waitingPID || [READY_LIST + 32 * waitingPID +1]==0) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	newPID = waitingPID + 100;
	while(newPID>=100) do
		if(currentPID + 100 == newPID) then
			[physicalSP - 2] = -1;
			ireturn;
		endif;
		newPID = [READY_LIST + 32 * (newPID-100) +1];
	endwhile;
	
	[ currentPCB + 1 ]= waitingPID + 100;	
	[ currentPCB + 2 ] = BP;		
	[ currentPCB + 3 ] = SP - 1; 	
	[ currentPCB + 4 ] = [ physicalSP ]; 
	[ currentPCB + 5 ] = PTBR;		
	[ currentPCB + 6 ] = PTLR;		
	[ currentPCB + 7 ] = R0;		
	[ currentPCB + 8 ] = R1;		
	[ currentPCB + 9 ] = R2;		
	[ currentPCB + 10 ] = R3;		
	[ currentPCB + 11 ] = R4;		
	[ currentPCB + 12 ] = R5;		
	[ currentPCB + 13 ] = R6;		
	[ currentPCB + 14 ] = R7;		
	

	newPID = 0;
	while (newPID<32) do
		if ([READY_LIST + 32 * newPID +1]==1) then
			break;
		endif;
		newPID = newPID+1;
		if(newPID == 32) then
			halt;
		endif;
	endwhile;
endif;



if (sysCallNo == 13 || sysCallNo == 10) then
	newPCB = READY_LIST + 32 * newPID;
	[ newPCB + 1 ] = 2; 	
	BP = [ newPCB + 2 ];	
	SP = [ newPCB + 3 ]; 	
	PTBR = [ newPCB + 5 ];	
	PTLR = [ newPCB + 6 ];	
	R0 = [ newPCB + 7 ];	
	R1 = [ newPCB + 8 ];	
	R2 = [ newPCB + 9 ];	
	R3 = [ newPCB + 10 ]; 	
	R4 = [ newPCB + 11 ]; 	
	R5 = [ newPCB + 12 ]; 	
	R6 = [ newPCB + 13 ]; 	
	R7 = [ newPCB + 14 ];	
	SP = SP + 1; 			     // Make space for storing the IP on top as after interrupt it is loaded from there
	

	newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
	[ newphysicalSP ] = [ newPCB + 4 ]; 
	[physicalSP - 2] = 0;
	ireturn;
endif;




//****************Implementation of Signal() system call*************************/
if (sysCallNo == 14) then	
	newPID = 1;
	while (newPID<1024) do
		if ([READY_LIST + newPID]==(currentPID+100)) then
			[READY_LIST + newPID] = 1;
		endif;
		newPID = newPID + 32;
	endwhile;
	[physicalSP - 2] = 0;
	ireturn;
endif;
[physicalSP - 2] = -1;
ireturn;
