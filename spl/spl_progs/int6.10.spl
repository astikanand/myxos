alias physicalSP S0;
alias systemcallnumber S1; 
alias arg1 S2;  
alias count S3;
alias fatIndex S4; 
alias basicBlock S5;
alias CodeBlocks S6;
alias codePages S7;
alias currentPTBR S8;
alias currentPID S9; 
alias sysTabIndex S10;
alias currentPCB S11;
alias parentPID S12;



physicalSP=([PTBR+2*(SP/512)]*512)+(SP%512);
systemcallnumber=[physicalSP-1];
arg1=[physicalSP-3];
currentPID=(PTBR-1024)/8;
currentPCB=READY_LIST+32*currentPID;
currentPTBR=1024+8*currentPID;



//***********************Implementation of EXEC() system call****************************//
if(systemcallnumber==9) then
	count=0;
	while(count<64) do
		if ([FAT+8*count]==arg1) then                                  //check for file existence
		    fatIndex=count;                    
		   	break;
		endif;
		count=count+1;
	endwhile;
          
	if(count==64) then                                                    //if not return -1
		[physicalSP-2]=-1;
		print"No File";
		ireturn;
    endif;

    load(1,[FAT+fatIndex*8+2]);                                           //load basic block
	                      

	
    count= 0;
	while(count<6) do
		if([currentPTBR+count]!=-1) then                                                  //subtract memeory free list count
			if([currentPTBR+count+1]=="11" || [currentPTBR+count+1]=="01") then
				[MEM_LIST+[currentPTBR+count]]=[MEM_LIST+[currentPTBR+count]]-1;

			else if([currentPTBR+count]>=448) then                                        //subtract disk free list count
					[DISK_LIST+[currentPTBR+count]]=[DISK_LIST+[currentPTBR+count]]-1;
				 endif;
			endif;
			[currentPTBR+count]=-1;
			[currentPTBR+count+1]="00";
		endif;
		count=count+2;
	endwhile;
	
	
	
	count = 0;
	while(1) do                                                                         //copy page table of coming process
		if([SCRATCHPAD + count] == -1 || [SCRATCHPAD + count] == "") then
			break;
		endif;
		[currentPTBR + 2*count] = [SCRATCHPAD + count];
		[currentPTBR + 2*count + 1] = "00";
		count = count + 1;
		if(count>4) then 
			[physicalSP] = -1;
			ireturn;
		endif;
	endwhile;	




	count=0;
	while(count<8) do                                                                    //close per process open file table
		sysTabIndex=[READY_LIST+currentPID*32+15+count*2];	
		if([FILE_TABLE+2*sysTabIndex+1]>0) then
			[FILE_TABLE+2*sysTabIndex+1]=[FILE_TABLE+2*sysTabIndex+1]-1;                  //decrease file open count
		endif;

		if([FILE_TABLE+2*sysTabIndex+1]==0)then                                        //if file count 0 invalidate the entry
			[FILE_TABLE+2*sysTabIndex]=-1;
		endif;

		[READY_LIST+ currentPID*32+15+2*count]=-1;
		[1536 + currentPID*32+15+2*count+1]=-1;
		count=count+1;
	endwhile;

	SP=3*512;                                                             

	physicalSP=([PTBR+2*(SP/512)]*512)+(SP % 512);

	[physicalSP]=0;
	[physicalSP-2]=0;

	ireturn;

endif;


//**************IMPLEMENTATION OF GETPID() SYSTEM CALL****************//
if(systemcallnumber==11) then
    [physicalSP-2]=currentPID;
    ireturn;
endif;



//*************IMPLEMENTATION OF GETPPID() SYSTEM CALL****************//
if(systemcallnumber==12) then
    parentPID=[currentPCB+31];
    [physicalSP-2]=parentPID;
    ireturn;
endif;
