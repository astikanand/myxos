//*************Implementing fork() system call***************//
print"INSIDE INT5";

alias physicalSP S0;
alias parentPID S1;
alias parentPCB S2;
alias sysCallNo S3;
alias count S4;
alias childPID S5;
alias parentPTBR S6;
alias childPTBR S7;
alias i S8;
alias parentPage S9;
alias childPage S10;
alias childPCB S11;
alias sysTabIndex S12;
alias phySPchild S13;
alias validPage S14;



physicalSP=([PTBR+ 2*(SP/512)]*512)+(SP % 512);
sysCallNo=[physicalSP - 1];
parentPID=(PTBR - 1024)/8;
parentPCB=READY_LIST+(parentPID*32);
parentPTBR=1024+parentPID*8;



if(sysCallNo == 8) then
      //******search for a free PCB for child**********//
      count=0;
	  while(count<32) do
           if([READY_LIST+ 32*count+ 1] == 0) then
                 childPID=count;
			     break;
		   endif;
           count=count+1;
	  endwhile;

	  if(count==32) then
	       [physicalSP-2]=-1;
		   ireturn;
	  endif;


     
     


      //**********search for the no. of valid pages*********//                                                                     
      validPage=0;                                                         
      count=0;
      while(count<4) do
            if ([parentPTBR+2*count+0]!=-1 && ([parentPTBR+2*count+1]=="01" ||[parentPTBR+2*count+1]=="11")) then  
                  validPage=validPage+1;
            endif;
            count=count+1;
      endwhile;




      //********checking if total pages available is greater or equal to valid Page**********//
      count=0;
      i=0;
      while(count<64) do                                                  
           if([1280+count]==0) then
               i=i+1;
           endif;
           if(i==validPage) then
                break;
           endif;
           count=count+1;
      endwhile;

      if(count==64) then                                                  
           [physicalSP-2]=-1;
           print"page not avl";
           ireturn;
      endif;
    

    
    childPTBR=1024+childPID*8;

    
    //*********************filling page table for new process and filling memeory free list*************//
    i=25;
    count=0;
   	while(count<4) do
		if([parentPTBR+2*count+0]!=-1 && ([parentPTBR+2*count+1]=="01"||[parentPTBR+2*count+1]=="11")) then
            while(i < 64) do
                if([ MEM_LIST + i]==0) then
                    [ MEM_LIST + i]=1;
                    [childPTBR+2*count+0]=i;
					          [childPTBR+2*count+1]=[parentPTBR+2*count+1];
					          i = i + 1;
					           break;
				        endif;

		          i = i + 1;
		        endwhile;

		else
			[childPTBR+2*count+0]=-1;
			[childPTBR+2*count+1]=[parentPTBR+2*count+1];
		endif;

		count=count+1;
    endwhile;




    //*****************copy the data for new process********************//
    count=0;
    while(count<4) do
        if([childPTBR+2*count+0]!=-1 && ([childPTBR+2*count+1]=="01"||[childPTBR+2*count+1]=="11")) then        
            i = 0;
            parentPage=[parentPTBR+2*count+0]*512;
            childPage=[childPTBR+2*count+0]*512;

    		while(i<512) do
                [childPage+i]=[parentPage+i];
    			i=i+1;
    		endwhile;
    	endif;
        count=count+1;
    endwhile;


    

    //*********************Copy PCB of parent process************************//
	childPCB=READY_LIST+32*childPID;
     
  [childPCB + 0 ] = childPID; 
  [childPCB + 2 ] = BP;
	[childPCB + 4 ] = [physicalSP];
	[childPCB + 3 ] = SP-1;     
	[childPCB + 5 ] = childPTBR;
	[childPCB + 6 ] = [parentPCB+6];
	[childPCB + 7 ] = R0;
	[childPCB + 8 ] = R1;
	[childPCB + 9 ] = R2;
	[childPCB + 10] = R3;
	[childPCB + 11] = R4;
	[childPCB + 12] = R5;
	[childPCB + 13] = R6;
	[childPCB + 14] = R7;
	[childPCB + 31] = parentPID;      

	


	//*************Copying open file table and increment file count************//
    count=0;
	i = 0;
	while(i<8) do
        [childPCB+15+2*i+0]=[parentPCB+15+2*i+0];
		[childPCB+15+2*i+1]=[parentPCB+15+2*i+1];

		if([parentPCB+15+2*i+0]!=-1) then
			sysTabIndex=[parentPCB+15+2*i+0];
			[FILE_TABLE+sysTabIndex*2+1]=[FILE_TABLE+sysTabIndex*2+1]+1;
		endif;
		
		i = i + 1;
    endwhile;

    

  //***********setting newprocess running and returning value*************//
	[childPCB + 1] = 1;

	[physicalSP-2] = childPID;

    phySPchild = ([childPTBR+2*((SP-1)/512)]*512)+((SP-1)%512);

    [phySPchild-1]=-2;

	ireturn;
	
endif;
